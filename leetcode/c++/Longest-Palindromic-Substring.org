* Longest-Palindromic-Substring
** 题目描述
Given a string s,return the longest palindromic substring in s。
给定一个字符串s, 返回最长的回文子字符串。
 + example 1
   #+begin_src text
     Input: s = "babad"
     Output: "bab"
     Note: "aba" is also a valid answer.
   #+end_src
 + example 2
   #+begin_src text
     Input: s = "cbbd"
     Output: "bb"
   #+end_src
 + example 3
   #+begin_src text
     Input: s = "a"
     Output: "a"
   #+end_src
 + example 4
   #+begin_src text
     Input: s = "ac"
     Output: "a"
   #+end_src
 + 限制
   * 1<=s.length <=1000
   * s consist of only digits and english letters
https://leetcode-cn.com/problems/longest-palindromic-substring/
** 题目分析
这题应该用动态规划来做。为什么,首先要想使用动态规划是需要满足几个条件的。
1. 问题要有最优子结构 :: 最优子结构就是递归分解后，结构最小的问题
2. 问题要能够递归分解 :: 递归分解，又叫转移方程，问题被不断递归拆解成一个个小的问题
3. 子问题的最优解决定了父问题的最优解
4. 有很多的重叠问题 :: 当问题有重叠问题时，重叠的问题会被不断的计算，这时候可以将重叠
   问题的结果存储起来，下次在次计算这个问题的时候，我们可以直接去取结果，用牺牲少量内存
   的方法来加速计算   
*** 具体分析
+ 首先我们看看能不能递归拆解这个问题
  最长的回文字串，这里有一个性质: 最长的回文字符串，他的子串一定也是一个回文字符串。
  如果他有任意一个字串，他不是回文字符串，那他就不构成回文了。因为回文一定是"a","aa"
  "aba"这三种形式。所以到这里最优子结构也就出来了。
+ 最优子结构
  1. "a"
  2. "aa"
  任意的回文字符串，一定是在这两个结构的基础上，通过在他们两端加上相同的字符复合而成
+ 转移方程
  | s就是回文字串                                    | s.length==1   |
  |--------------------------------------------------+---------------|
  | 如果s[0]==s[1]那么就是回文字串                   | s.length == 2 |
  | 如果s[0]!=s[1]那么就不是回文字串                 |               |
  |--------------------------------------------------+---------------|
  | 两端的字符相等 && 两端中间的字符必须是回文字符串 | s.length >2   |
  这只是最通俗的形式，要想变成代码，还需要有进一步的考虑，必须转化成数学的形式，方便
  转化成代码。
  $$ f(x)=\left\{
\begin{aligned}
x & = & \cos(t) \\
y & = & \sin(t) \\
z & = & \frac xy
\end{aligned}
\right.
$$
